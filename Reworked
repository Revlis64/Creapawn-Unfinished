#pragma once


//void DrawSprite(unint16_t bringSprite, uint8_t )
DrawPawn(uint16_t bringSprite, int16_t x, int16_t y, bool foreColor, uint8_t currentPawnDirection)
{
  bool backColor = foreColor ? 1 : 0;

  ardbitmap.drawBitmap(x, y, pawnSpriteBackground[bringSprite / 8], 16, 16, backColor, ALIGN_NONE, currentPawnDirection);
  ardbitmap.drawBitmap(x, y, pawnSprite[bringSprite / 8], 16, 16, foreColor, ALIGN_NONE, currentPawnDirection);
}

void DrawBoutScreen()
{
  uint8_t textBoxOrganizer = 0;
  uint8_t y = 0;
  for (uint8_t x = 0; x < 4; ++y)
  {
    if ((pawnByte[x][1] > 15) && (textBoxOrganizer < 8))
    {
      if (pawn[textBoxOrganizer].energy > 0)
        TextBox(0, (textBoxOrganizer * 7), 61, 6);
      bool textColor = (pawn[textBoxOrganizer].energy == 0) ? WHITE : BLACK;
      Text(pawnByte[textBoxOrganizer][0], 1, 1 + (37 * (textBoxOrganizer / 4)) + (textBoxOrganizer * 7), textColor);
      tinyfont.setCursor(51, 1 + (37 * (textBoxOrganizer / 4)) + (textBoxOrganizer * 7));
      if (pawn[textBoxOrganizer].energy < 10)
        tinyfont.print(F("0"));
      tinyfont.print(pawn[textBoxOrganizer].energy);
      ++textBoxOrganizer;
    }

    arduboy.fillRect((y * 16) + 64, x * 16, 16, 16, (x + y)%2);
    if ((y == 4) && (x != 4))
    {
      y = 0;
      ++x;
    }
  }

}


  
   /*
   Copyright (C) 2022 Revlis

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

#include <Arduboy2.h>
#include <Tinyfont.h>
#include <ArduboyTones.h>
#include <ArduboyTonesPitches.h>

Arduboy2Base arduboy;
Tinyfont tinyfont = Tinyfont(arduboy.sBuffer, Arduboy2::width(), Arduboy2::height());
ArduboyTones sound(arduboy.audio.enabled);
#define ARDBITMAP_SBUF arduboy.getBuffer()
#include <ArdBitmap.h>
ArdBitmap<WIDTH, HEIGHT> ardbitmap;

enum class GameState : uint8_t
{
  PreboutSetup,
  BoutScreen,
};

enum class Direction : uint8_t
{
  Right,
  Left,
  Up,
  Down,
};

enum class Type : uint8_t
{
  Null,
  Nature,
  Synth,
  Mystic,
  Omni,
};

enum class Zodiac : uint8_t
{
  None = 2,
  Sagittarius,
  Capricorn,
  Aquarius,
  Pisces,
  Aries,
  Taurus,
  Gemini,
  Cancer,
  Leo,
  Virgo,
  Libra,
  Scorprio,
  Ophiuchus,
};

struct Pawn
{
  uint8_t type;
  uint8_t zodiac;
  uint8_t level;
  uint8_t energy;
  uint8_t maxEnergy;
  uint8_t actionCost;
  uint8_t power;
  uint8_t damageResistance;
  uint8_t experience;
  uint8_t maxExperience;
  Direction facingDirection;
};

uint8_t pawnByte[8][2];
uint8_t pawnBoardLocation[4][4];
bool turn;
uint8_t actionPoints[2];
uint8_t selectedPawn;
uint8_t buttonClick;

Pawn pawn[8];
GameState gameState = GameState::PreboutSetup;

#include "bitmap.h"
#include "text.h"
#include "pawnconstruct.h"
#include "boutscreen.h"


void Game()
{
  switch (gameState) 
  {
    case GameState::PreboutSetup:
      pawnByte[0][0] = random( 0, 256);
      pawnByte[0][1] = (random( 0, 225)) + 16;
      pawnByte[1][0] = random( 0, 256);
      pawnByte[1][1] = (random( 0, 225)) + 16;
      pawnByte[2][0] = random( 0, 256);
      pawnByte[2][1] = (random( 0, 225)) + 16;
      pawnByte[3][0] = random( 0, 256);
      pawnByte[3][1] = (random( 0, 225)) + 16;
      PawnConstruct();
      selectedPawn = 0;
      selectedPawn = 0;
      gameState = GameState::BoutScreen;
      break;

    case GameState::BoutScreen:
    DrawBoutScreen();    
      break;
  }
}

void setup()
{
  // put your setup code here, to run once:
  arduboy.begin();
  arduboy.setFrameRate(60);
  arduboy.initRandomSeed();
  
}

void loop() {
  // put your main code here, to run repeatedly:
  if (!arduboy.nextFrame())
    return;
  arduboy.clear();
  arduboy.pollButtons();
  Game();
  arduboy.display();
}

const uint8_t speciesStats[32][5]
{
  // Type, Energy, Damage Resistance, Power, Action Cost
  //NULL
  /*VOIDISMAL*/{0, 0, 0, 0, 0},
  
  //SYNTH
  /*AUDIOUSE*/{1, 3, 0, 1, 3},
  /*BOLTNETIC*/{1, 1, 1, 3, 2},
  /*DRIBBY*/{1, 2, 2, 1, 2},
  /*LUMINAT*/{1, 3, 0, 2, 2},
  /*MICRUNT*/{1, 2, 2, 0, 3},
  /*ODRION*/{1, 2, 3, 2, 0},
  /*OUTLECTRIC*/{1, 3, 1, 0, 3},
  /*SLUGAMMA*/{1, 3, 3, 1, 0},
  /*SPYMERA*/{1, 1, 3, 0, 3},
  /*XENAUCER*/{1, 1, 2, 2, 2},

  //NATURE
  /*BEETHRONE*/{2, 0, 3, 2, 2},
  /*BUBBLUE*/{2, 3, 3, 0, 1},
  /*BUNNERINA*/{2, 2, 0, 2, 3},
  /*CHAMPANZON*/{2, 2, 1, 2, 2},
  /*CHLOROAR*/{2, 2, 2, 2, 1},
  /*CRIBBIT*/{2, 0, 3, 3, 1},
  /*DASHOUND*/{2, 2, 0, 3, 2},
  /*MAYHAM*/{2, 1, 3, 3, 0},
  /*NECRAWLER*/{2, 0, 1, 3, 3},
  /*TERRUPTION*/{2, 2, 2, 3, 0},

  //MYSTIC
  /*CHIVAMPERA*/{3, 3, 1, 1, 2},
  /*DUALDRA*/{3, 2, 1, 3, 1},
  /*FAEFLUFF*/{3, 0, 2, 2, 3},
  /*GRIFELIOS*/{3, 3, 0, 3, 1},
  /*MAUROAH*/{3, 2, 1, 1, 3},
  /*PEGSHIRE*/{3, 1, 1, 2, 3},
  /*POLTERROR*/{3, 3, 1, 3, 0},
  /*RAVUACK*/{3, 3, 2, 0, 2},
  /*SCARDRA*/{3, 1, 0, 3, 3},
  /*SQUEAMASK*/{3, 0, 3, 1, 3},

  //OMNI
    /*TRIKURN*/{4, 3, 2, 1, 1},
};

const uint8_t zodiacStats[16][4]
{
  // Energy, Damage Resistance, Power, Action Cost
  /*NONE*/{0, 0, 0, 0},
  /*NONE*/{0, 0, 0, 0},
  /*NONE*/{0, 0, 0, 0},
  /*SAGITTARIUS*/{2, 1, 2, 2},
  /*CAPRICORN*/{3, 0, 1, 3},
  /*AQUARIUS*/{3,  3, 0, 1},
  /*PISCES*/{2, 2, 1, 2},
  /*ARIES*/{2, 0, 3, 2},
  /*TAURUS*/{0, 3, 2, 2},
  /*GEMINI*/{1, 2, 2, 2},
  /*CANCER*/{1, 3, 2, 1},
  /*LEO*/{ 0, 3, 3, 1},
  /*VIRGO*/{3, 1, 1, 2},
  /*LIBRA*/{2, 2, 2, 1},
  /*SCORPIO*/{3, 0, 3, 1},
  /*OPHIUCHUS*/{3, 2, 2, 0}
};

void CreatePawnByte(uint8_t pawnNumber)
{
  pawnByte[pawnNumber][0] = ((random( 0, 32)) * 8) + (random(0, 8));
  pawnByte[pawnNumber][1] = ((random( 0, 15)) * 16) + 16;
}

void PawnStatConstruct(uint8_t pawnByteTwo, uint8_t pawnByteThree, uint8_t pawnNumber)
{
  for (pawnByteThree = 0; pawnByteThree > 15; pawnByteThree-=16)
    ++pawn[pawnNumber].zodiac;
    if (pawnNumber < 4)
      for (pawnByteThree; pawnByteThree > 0; -- pawnByteThree)
        ++pawn[pawnNumber].experience;

  pawn[pawnNumber].type = speciesStats[pawnByteTwo / 8][0];
  pawn[pawnNumber].level = (pawnByteTwo % 8) + 1;
  pawn[pawnNumber].level = ((pawn[pawnNumber].experience == 15) && (pawn[pawnNumber].level == 8)) ? ++pawn[pawnNumber].level : pawn[pawnNumber].level;
  pawn[pawnNumber].maxEnergy = ((pawn[pawnNumber].level * (speciesStats[pawnByteTwo / 8][1] + zodiacStats[pawn[pawnNumber].zodiac][0] + 4)) + 15) / 5;
  pawn[pawnNumber].energy = pawn[pawnNumber].maxEnergy;
  pawn[pawnNumber].damageResistance = ((pawn[pawnNumber].level * (speciesStats[pawnByteTwo / 8][2] + zodiacStats[pawn[pawnNumber].zodiac][1] + 4)) + 15) / 10;
  pawn[pawnNumber].power = ((pawn[pawnNumber].level * (speciesStats[pawnByteTwo / 8][3] + zodiacStats[pawn[pawnNumber].zodiac][2] + 4)) + 15) / 10;
  pawn[pawnNumber].actionCost = 5 - ((speciesStats[pawnByteTwo / 8][4] + zodiacStats[pawn[pawnNumber].zodiac][3]) / 2);
}

void ClearPawnBytes(uint8_t pawnNumber)
{
  pawnByte[pawnNumber][0] = 0;
  pawnByte[pawnNumber][1] = 0;
}

void ClearPawnStats(uint8_t pawnNumber)
{
  pawn[pawnNumber].type = 0;
  pawn[pawnNumber].level = 0;
  pawn[pawnNumber].zodiac = 0;
  pawn[pawnNumber].maxEnergy = 0;
  pawn[pawnNumber].energy = 0;
  pawn[pawnNumber].damageResistance = 0;
  pawn[pawnNumber].power = 0;
  pawn[pawnNumber].actionCost = 0;
  if (pawnNumber < 4)
  {
    pawn[pawnNumber].experience = 0;
    pawn[pawnNumber].maxExperience = 0;
  }
}

void PawnConstruct()
{
  
  for (uint8_t row = 0; row < 4; ++row)
    for (uint8_t colom = 0; colom < 4; ++colom)
      pawnBoardLocation[row][colom] = 8;

  for ( uint8_t i = 0; i < 8; ++i)
  {
    if (i > 3)
      ClearPawnBytes(i);
    ClearPawnStats(i);
    bool a = random (0, 2);
    uint8_t guaranteedPawn = (random  (0,4)) + 4;
    if (((i == guaranteedPawn) || (a == 1)) && (i > 3))
      CreatePawnByte(i);
    if (pawnByte[i][1] > 15)
      PawnStatConstruct( pawnByte[i][0], pawnByte[i][1], i);

      switch (i)
      {
        case 0 ... 3:
          pawn[i].facingDirection = Direction::Right;
          pawnBoardLocation[i][0] = i;
          break;
        case 4 ... 7:
          pawn[i].facingDirection = Direction::Left;
          pawnBoardLocation[i - 4][3] = i;
          break;
      }
  }
}

#pragma once

void TextBox(uint8_t x, uint8_t y,uint8_t w, uint8_t l)
{
  arduboy.fillRoundRect(x, y, w, l, WHITE);
}

void Text(uint16_t bringText, uint8_t x, uint8_t y, bool textColor) 
{
  tinyfont.setTextColor(textColor);

  tinyfont.setCursor( x, y);
  switch (bringText)
  {

// NULL //
    case 0 ... 7:
      tinyfont.print(F("VOIDISMAL"));
      break;

// SYNTH //
    case 8 ... 15:
      tinyfont.print(F("AUDIOUSE"));
      break;
    case 16 ... 23:
      tinyfont.print(F("BOLTNETIC"));
      break;
    case 24 ... 31:
      tinyfont.print(F("DRIBBY"));
      break;
    case 32 ... 39:
      tinyfont.print(F("LUMINAT"));
      break;
    case 40 ... 47:
      tinyfont.print(F("MICRUNT"));
      break;
    case 48 ... 55:
      tinyfont.print(F("ODRION"));
      break;
    case 56 ... 63:
      tinyfont.print(F("OUTLECTRIC"));
      break;
    case 64 ... 71:
      tinyfont.print(F("SLUGAMMA"));
      break;
    case 72 ... 79:
      tinyfont.print(F("SPYMERA"));
      break;
    case 80 ... 87:
      tinyfont.print(F("XENAUCER"));
      break;

// NATURE //      
    case 88 ... 95:
      tinyfont.print(F("BEETHRONE"));
      break;
    case 96 ... 103:
      tinyfont.print(F("BUBBLUE"));
      break;
    case 104 ... 111:
      tinyfont.print(F("BUNNERINA"));
      break;
    case 112 ... 119:
      tinyfont.print(F("CHAMPANZON"));
      break;
    case 120 ... 127:
      tinyfont.print(F("CHLOROAR"));
      break;
    case 128 ... 135:
      tinyfont.print(F("CRIBBIT"));
      break;
    case 136 ... 143:
      tinyfont.print(F("DASHOUND"));
      break;
    case 144 ... 151:
      tinyfont.print(F("MAYHAM"));
      break;
    case 152 ... 159:
      tinyfont.print(F("NECRAWLER"));
      break;
    case 160 ... 167:
      tinyfont.print(F("TERRUPTION"));
      break;

// MYSTIC //
    case 168 ... 175:
      tinyfont.print(F("CHIVAMPERA"));
      break;
    case 176 ... 183:
      tinyfont.print(F("DUALDRA"));
      break;
    case 184 ... 191:
      tinyfont.print(F("FAEFLUFF"));
      break;
    case 192 ... 199:
      tinyfont.print(F("GRIFELIOS"));
      break;
    case 200 ... 207:
      tinyfont.print(F("MAUROAH"));
      break;
    case 208 ... 215:
      tinyfont.print(F("PEGSHIRE"));
      break;
    case 216 ... 223:
      tinyfont.print(F("POLTERROR"));
      break;
    case 224 ... 231:
      tinyfont.print(F("RAVUACK"));
      break;
    case 232 ... 239:
      tinyfont.print(F("SCARDRA"));
      break;
    case 240 ... 247:
      tinyfont.print(F("SQUEAMASK"));
      break;

// OMNI //
    case 248 ... 255:
      tinyfont.print(F("TRIKURN"));
      break;

    case 256:
      tinyfont.print(F("VS"));
      break;
      
    case 257:
      tinyfont.print(F("AP"));
      break;
  }
}

#pragma once

const unsigned char PROGMEM pawnSprite[32][32]
{

// NULL //
  //VOIDISMAL
  {
    0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x3d, 0x3f, 0x3d, 0x3f, 0x3f, 0x3d, 0x3f, 0x1d, 0x0f, 0x00, 0x00, 
  },

// SYNTH //
  //AUDIOUSE
  {
    0x00, 0x78, 0xe8, 0x78, 0x00, 0x38, 0x44, 0xd4, 0x04, 0x58, 0x14, 0x94, 0x58, 0x60, 0x80, 0x00, 
    0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x1e, 0x21, 0x40, 0x48, 0x2c, 0x20, 0x42, 0x5a, 0x6d, 0x00, 
  },
  //BOLTNETIC
  {
    0x00, 0xc0, 0xc0, 0x40, 0x9e, 0x12, 0xf2, 0x5a, 0xf4, 0x1a, 0x9e, 0x40, 0xc0, 0xc0, 0x00, 0x00, 
    0x00, 0x0c, 0x0c, 0x0b, 0x04, 0x03, 0x3f, 0x55, 0x3f, 0x03, 0x04, 0x0b, 0x0c, 0x0c, 0x00, 0x00, 
  },
  //DRIBBY
  {
    0x00, 0x00, 0x00, 0xf0, 0x08, 0x64, 0x66, 0x86, 0x8e, 0x84, 0x68, 0x70, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x09, 0x68, 0x56, 0x50, 0x60, 0x21, 0x22, 0x61, 0x50, 0x51, 0x6e, 0x09, 0x06, 0x00, 
  },
  //LUMINAT
  {
    0x00, 0x70, 0x90, 0x20, 0xf8, 0x24, 0x52, 0x22, 0x02, 0x22, 0x54, 0xf8, 0x20, 0x90, 0x70, 0x00, 
    0x00, 0x0c, 0x10, 0x17, 0x0d, 0x05, 0x4d, 0x35, 0x05, 0x7d, 0x05, 0x0d, 0x17, 0x10, 0x0c, 0x00, 
  },
  //MICRUNT
  {
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x98, 0x14, 0x10, 0xa8, 0xc4, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0e, 0x0d, 0x43, 0x64, 0x78, 0x08, 0x0b, 0x7b, 0x64, 0x43, 0x0d, 0x0e, 0x00, 0x00, 
  },
  //ODRION
  {
    0x00, 0x80, 0x40, 0xa0, 0x50, 0x08, 0x4a, 0x84, 0x8a, 0x48, 0x90, 0xa0, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x0f, 0x10, 0x2f, 0x50, 0x40, 0x40, 0x48, 0x45, 0x64, 0x54, 0x25, 0x19, 0x0e, 0x00, 0x00, 
  },
  //OUTLECTRIC
  {
    0x00, 0x00, 0x60, 0x90, 0x10, 0x38, 0x44, 0xfe, 0x82, 0x9a, 0xc2, 0x9a, 0x82, 0x7c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x29, 0x65, 0x26, 0x64, 0x28, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  },
  //SLUGAMMA
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0xe0, 0x00, 0xc0, 0xa0, 0xe0, 0x00, 0x00, 
    0x00, 0x30, 0x48, 0x44, 0x4c, 0x42, 0x4f, 0x46, 0x52, 0x4a, 0x53, 0x52, 0x4a, 0x54, 0x38, 0x00, 
  },
  //SPYMERA
  {
    0x00, 0xc0, 0x20, 0x12, 0x0a, 0x8a, 0x4a, 0x2c, 0x2a, 0x2a, 0x4a, 0x92, 0x20, 0xc0, 0x00, 0x00, 
    0x00, 0x0f, 0x10, 0x20, 0x40, 0x47, 0x48, 0x50, 0x53, 0x53, 0x48, 0x27, 0x10, 0x0f, 0x00, 0x00, 
  },
  //XENAUCER
  {
    0x00, 0x80, 0x40, 0xa0, 0x70, 0x88, 0x24, 0x44, 0x14, 0x44, 0xa8, 0x70, 0xa0, 0x40, 0x80, 0x00, 
    0x00, 0x21, 0x32, 0x1c, 0x44, 0x6a, 0x39, 0x09, 0x09, 0x39, 0x6a, 0x44, 0x1c, 0x32, 0x21, 0x00, 
  },
  
// NATURE //
  //BEETHRONE
  {
    0x00, 0x30, 0x50, 0x90, 0x30, 0xd0, 0xa0, 0xc0, 0x3c, 0xb2, 0x30, 0x78, 0x30, 0xfc, 0x02, 0x00, 
    0x00, 0x01, 0x47, 0x2d, 0x1b, 0x4d, 0x3a, 0x0d, 0x5a, 0x25, 0x09, 0x04, 0x09, 0x07, 0x00, 0x00, 
  },
  //BUBBLUE
  {
    0x00, 0x18, 0xfc, 0x1c, 0x08, 0x44, 0xc6, 0xc6, 0x6e, 0x1e, 0xbe, 0x9c, 0x68, 0xd0, 0xe0, 0x00, 
    0x00, 0x06, 0x0f, 0x1f, 0x2f, 0x46, 0x40, 0x40, 0x46, 0x4d, 0x4a, 0x4a, 0x2d, 0x16, 0x0f, 0x00, 
  },
  //BUNNERINA
  {
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x84, 0x34, 0x24, 0xb8, 0xf4, 0x24, 0x38, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x14, 0x1a, 0x3f, 0x5a, 0x3a, 0x1a, 0x3b, 0x5a, 0x3e, 0x1b, 0x14, 0x00, 0x00, 0x00, 
  },
 //CHAMPANZON
  {
    0x00, 0x00, 0x00, 0x80, 0xd8, 0x7c, 0x56, 0x4a, 0xd6, 0x4a, 0x7c, 0xc0, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x09, 0x0d, 0x63, 0x56, 0x7a, 0x1a, 0x15, 0x7a, 0x56, 0x63, 0x0d, 0x09, 0x06, 0x00, 
  },
  //CHLOROAR
  {
    0x00, 0x20, 0x50, 0xa0, 0x80, 0x00, 0x80, 0x60, 0x10, 0x68, 0x08, 0x88, 0x10, 0xa0, 0xc0, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x0e, 0x11, 0x2f, 0x40, 0x44, 0x59, 0x6e, 0x22, 0x66, 0x5a, 0x6d, 0x00, 
  },
  //CRIBBIT
  {
    0x00, 0xe0, 0x10, 0x08, 0x44, 0x52, 0xa2, 0x02, 0x02, 0x02, 0xa4, 0x58, 0x70, 0xc0, 0x00, 0x00, 
    0x00, 0x7d, 0x42, 0x56, 0x66, 0x4c, 0x6c, 0x2d, 0x25, 0x6d, 0x4c, 0x6e, 0x46, 0x5d, 0x60, 0x00, 
  },
  //DASHOUND
  {
    0x00, 0x60, 0xc0, 0x00, 0x80, 0x80, 0x80, 0x80, 0x9c, 0xb4, 0x48, 0xac, 0x0c, 0xb0, 0xc0, 0x00, 
    0x00, 0x78, 0x46, 0x51, 0x68, 0x59, 0x6a, 0x08, 0x79, 0x42, 0x58, 0x68, 0x5f, 0x61, 0x01, 0x00, 
  },
  //MAYHAM
  {
    0x00, 0xc0, 0x30, 0xb0, 0x80, 0x8c, 0xf2, 0x04, 0x28, 0x68, 0xac, 0xa8, 0x6c, 0xf2, 0x0c, 0x00, 
    0x00, 0x1e, 0x21, 0x40, 0x21, 0x20, 0x23, 0x26, 0x4b, 0x2a, 0x2b, 0x4b, 0x3a, 0x07, 0x00, 0x00, 
  },
  //NECRAWLER
  {
    0x00, 0x00, 0x00, 0xe0, 0x10, 0xc8, 0xc8, 0xd8, 0x28, 0x08, 0xc8, 0xd0, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x0a, 0x05, 0x37, 0x0c, 0x71, 0x19, 0x25, 0x6c, 0x3c, 0x6d, 0x25, 0x1f, 0x70, 0x00, 0x00, 
  },
  //TERRUPTION
  {
    0x00, 0x00, 0xc0, 0x60, 0x20, 0x20, 0x10, 0x38, 0xc4, 0xb4, 0xa4, 0x84, 0x98, 0xe0, 0x00, 0x00, 
    0x00, 0x06, 0x09, 0x10, 0x38, 0x54, 0x56, 0x75, 0x37, 0x50, 0x50, 0x6f, 0x05, 0x06, 0x00, 0x00, 
  },

// MYSTIC //
  //CHIVAMPERA
  {
    0x00, 0xf0, 0x08, 0x04, 0x32, 0x4a, 0xa4, 0x10, 0x60, 0x18, 0xa4, 0xc2, 0x3a, 0x04, 0x00, 0x00, 
    0x00, 0x01, 0x02, 0x24, 0x48, 0x50, 0x61, 0x45, 0x42, 0x25, 0x19, 0x07, 0x00, 0x00, 0x00, 0x00, 
  },
  //DUALDRA
  {
    0x00, 0xe0, 0xf0, 0x08, 0xc4, 0x24, 0x46, 0x1c, 0x44, 0x2c, 0xf6, 0x1c, 0x44, 0x28, 0xf0, 0x00, 
    0x00, 0x03, 0x0d, 0x12, 0x24, 0x49, 0x42, 0x42, 0x46, 0x49, 0x42, 0x46, 0x3a, 0x01, 0x00, 0x00, 
  },
    //FAEFLUFF
  {
    0x00, 0x38, 0x44, 0x84, 0x04, 0x88, 0x50, 0x20, 0x30, 0x28, 0x94, 0x64, 0x44, 0xb8, 0x00, 0x00, 
    0x00, 0x06, 0x09, 0x10, 0x10, 0x0f, 0x10, 0x22, 0x23, 0x20, 0x24, 0x22, 0x13, 0x0f, 0x00, 0x00, 
  },
    //GRIFELIOS
  {
    0x00, 0xda, 0x34, 0x98, 0x40, 0x22, 0x26, 0xca, 0x32, 0x04, 0x24, 0x68, 0x90, 0x60, 0x80, 0x00, 
    0x00, 0x3d, 0x42, 0x51, 0x69, 0x59, 0x6a, 0x09, 0x71, 0x42, 0x54, 0x74, 0x5f, 0x61, 0x01, 0x00, 
  },
  //MAUROAH
  {
    0x00, 0xc0, 0x20, 0xc0, 0x00, 0xf0, 0xa8, 0xa4, 0xae, 0xb8, 0x84, 0xb8, 0xa4, 0xfe, 0x00, 0x00, 
    0x00, 0x3b, 0x44, 0x43, 0x52, 0x63, 0x24, 0x28, 0x49, 0x4c, 0x2a, 0x2c, 0x49, 0x57, 0x60, 0x00, 
  },
  //PEGSHIRE
  {
    0x00, 0x00, 0x80, 0xc0, 0x20, 0x10, 0x10, 0x30, 0x48, 0xf4, 0x0a, 0xa6, 0x0a, 0x26, 0xf8, 0x00, 
    0x00, 0x07, 0x08, 0x7f, 0x41, 0x39, 0x49, 0x7a, 0x0a, 0x79, 0x40, 0x38, 0x49, 0x7f, 0x00, 0x00, 
  },
  //POLTERROR
  {
    0x00, 0x00, 0xe0, 0x10, 0x08, 0xc4, 0xe4, 0xa2, 0x42, 0x02, 0x44, 0xa4, 0xe8, 0xd0, 0xe0, 0x00, 
    0x00, 0x0c, 0x17, 0x20, 0x72, 0x56, 0x76, 0x4c, 0x46, 0x4c, 0x46, 0x4c, 0x76, 0x56, 0x3b, 0x00, 
  },
  //RAVUACK
  {
    0x00, 0x80, 0x00, 0x80, 0xc0, 0x64, 0x7c, 0xfe, 0xee, 0xfe, 0x7e, 0xec, 0xe4, 0xc0, 0x80, 0x00, 
    0x00, 0x03, 0x07, 0x0d, 0x1a, 0x3b, 0x5b, 0x4b, 0x1b, 0x3d, 0x5f, 0x4e, 0x01, 0x01, 0x03, 0x00, 
  },
  //SCARDRA
  {
    0x00, 0xc0, 0x20, 0x10, 0x20, 0x40, 0xf0, 0xa8, 0xf4, 0x0a, 0x6e, 0x4a, 0x0c, 0x30, 0xc0, 0x00, 
    0x00, 0x1f, 0x08, 0x0c, 0x12, 0x26, 0x6c, 0x40, 0x4a, 0x5c, 0x73, 0x51, 0x5f, 0x6d, 0x00, 0x00, 
  },
  //SQUEAMASK
  {
    0x00, 0xc0, 0x08, 0x94, 0xe4, 0x12, 0xc8, 0x68, 0xc8, 0x08, 0xc8, 0x72, 0xe4, 0x14, 0xc8, 0x00, 
    0x00, 0x00, 0x01, 0x48, 0x35, 0x02, 0x04, 0x09, 0x08, 0x0e, 0x08, 0x05, 0x03, 0x35, 0x48, 0x00, 
  },

// OMNI //
  //TRIKURN
  {
    0x00, 0x00, 0xc0, 0x34, 0x4a, 0x74, 0x40, 0x34, 0x4a, 0x74, 0x40, 0xb4, 0x4a, 0x34, 0x00, 0x00, 
    0x00, 0x0f, 0x10, 0x20, 0x40, 0x42, 0x4b, 0x50, 0x50, 0x4a, 0x23, 0x10, 0x0f, 0x00, 0x00, 0x00, 
  }
};

const unsigned char PROGMEM pawnSpriteBackground[32][32]
{

// NULL //
  //VOIDISMAL
  {
    0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 
    0x00, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x00, 
  },
  //AUDIOUSE
  {
    0x78, 0xfc, 0xfc, 0xfc, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0x80, 
    0x00, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x6d, 
  },
  //BOLTNETIC
  {
    0xc0, 0xe0, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0xe0, 0xe0, 0xc0, 0x00, 
    0x0c, 0x1f, 0x1f, 0x1f, 0x0f, 0x3f, 0x7f, 0xff, 0x7f, 0x3f, 0x0f, 0x1f, 0x1f, 0x1f, 0x0c, 0x00, 
  },
  //DRIBBY
  {
    0x00, 0x00, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
    0x06, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x06, 
  },
  //LUMINAT
  {
    0x70, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf8, 0xf8, 0x70, 
    0x0c, 0x1e, 0x3f, 0x3f, 0x1f, 0x4f, 0xff, 0x7f, 0x7f, 0xff, 0x7f, 0x1f, 0x3f, 0x3f, 0x1e, 0x0c, 
  },
  //MICRUNT
  {
    0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfc, 0xfc, 0xee, 0xc4, 0x00, 0x00, 0x00, 
    0x00, 0x0e, 0x1f, 0x5f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x5f, 0x1f, 0x0e, 0x00, 
  },
  //ODRION
  {
    0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 
    0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0e, 0x00, 
  },
  //OUTLECTRIC
  {
    0x00, 0x60, 0xf0, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 
    0x00, 0x00, 0x30, 0x79, 0x7f, 0xff, 0x7f, 0xff, 0x7d, 0x79, 0x31, 0x01, 0x01, 0x00, 0x00, 0x00, 
  },
  //SLUGAMMA
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0xe0, 0xe0, 0xf0, 0xf0, 0xe0, 0x00, 
    0x30, 0x78, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7c, 0x38, 
  },
  //SPYMERA
  {
    0xc0, 0xe0, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf2, 0xe0, 0xc0, 0x00, 
    0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x00, 
  },
  //XENAUCER
  {
    0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 
    0x23, 0x77, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0x77, 0x23, 
  },
  
//NATURE//
  //BEETHRONE
  {
    0x30, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfc, 0xfe, 0xff, 0x02, 
    0x01, 0x47, 0xef, 0x7f, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0x7f, 0x3f, 0x0f, 0x1f, 0x0f, 0x07, 0x00, 
  },
  //BUBBLUE
  {
    0x18, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 
    0x06, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 
  },
  //BUNNERINA
  {
    0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0x7c, 0x38, 0x00, 0x00, 
    0x00, 0x14, 0x3e, 0x3f, 0x7f, 0xff, 0x7f, 0x3f, 0x7f, 0xff, 0x7f, 0x3f, 0x3f, 0x14, 0x00, 0x00, 
  },
  //CHAMPANZON
  {
    0x00, 0x00, 0x80, 0xd8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xc0, 0x80, 0x00, 0x00, 
    0x06, 0x0f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x06, 
  },
  //CHLOROAR
  {
    0x20, 0x70, 0xf8, 0xf0, 0xe0, 0x80, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 
    0x00, 0x00, 0x01, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x6d, 
  },
  //CRIBBIT
  {
    0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xc0, 0x00, 
    0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x60, 
  },
  //DASHOUND
  {
    0x60, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xdc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xf0, 0xc0, 
    0x78, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x63, 0x01, 
  },
  //MAYHAM
  {
    0xc0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfc, 0xfe, 0xfc, 0xfe, 0xff, 0xfe, 0x0c, 
    0x1e, 0x3f, 0x7f, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0x7f, 0x3f, 0x07, 0x00, 
  },
  //NECRAWLER
  {
    0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 
    0x0a, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0x70, 0x00, 
  },
  //TERRUPTION
  {
    0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0x00, 
    0x06, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x6f, 0x0f, 0x06, 0x00, 
  },

//MYSTIC//
  //CHIVAMPERA
  {
    0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x3e, 0x04, 0x00, 
    0x01, 0x03, 0x27, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 
  },
  //DUALDRA
  {
    0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 
    0x03, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3b, 0x01, 0x00, 
  },
  //FAEFLUFF
  {
    0x38, 0x7c, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfc, 0xb8, 0x00, 
    0x06, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x00, 
  },
  //GRIFELIOS
  {
    0xda, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x80, 
    0x3d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x63, 0x01, 
  },
  //MAUROAH
  {
    0xc0, 0xe0, 0xf0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfc, 0xfe, 0xff, 0xfe, 0x00, 
    0x3b, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xf7, 0x60, 
  },
  //PEGSHIRE
  {
    0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 
    0x07, 0x0f, 0x7f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x7f, 0x00, 
  },
  //POLTERROR
  {
    0x00, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 
    0x0c, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3b, 
  },
  //RAVUACK
  {
    0x80, 0xc0, 0x80, 0xc0, 0xe4, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xe4, 0xc0, 0x80, 
    0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x4f, 0x03, 0x07, 0x03, 
  },
  //SCARDRA
  {
    0xc0, 0xe0, 0xf0, 0xf8, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 
    0x1f, 0x3f, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6d, 0x00, 
  },
  //SQUEAMASK
  {
    0xc0, 0xe8, 0xfc, 0xfe, 0xfe, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xfe, 0xfe, 0xfc, 0xc8, 
    0x00, 0x01, 0x4b, 0xff, 0x7f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x7f, 0xfd, 0x48, 
  },

//OMNI//
  //TRIKURN
  {
    0x00, 0xf0, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0x7e, 0x34, 0x00, 
    0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 
  }
};
